{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","state","check","cross","onCheck","_this","setState","_this2","this","react_default","a","createElement","className","props","task","Task","onClick","removeItem","index","type","checked","onChange","Component","App","formData","tasks","updateItem","event","key","target","placeholder","newData","value","originalState","copy","Object","assign","submitItem","preventDefault","slice","push","console","log","splice","ItemList","map","src_ListItem","onSubmit","class","clearTasks","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMA0CeA,mNApCXC,MAAQ,CACJC,OAAO,EACPC,MAAO,WAIXC,QAAU,WACmB,UAArBC,EAAKJ,MAAME,MACXE,EAAKC,SAAS,CAAEH,MAAO,UAAWD,OAAO,IAEzCG,EAAKC,SAAS,CAAEH,MAAO,QAASD,OAAO,6EAatC,IAAAK,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,KAAKP,MAAME,OAAQK,KAAKK,MAAMC,KAAKC,KAAlD,IAAwDN,EAAAC,EAAAC,cAAA,QAAMK,QAAS,kBAAMT,EAAKM,MAAMI,WAAWV,EAAKM,MAAMK,SAAtD,UAAxD,KACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,WAAWC,QAASZ,KAAKP,MAAMC,MACvCmB,SAAU,kBAAMd,EAAKH,sBAhCtBkB,cCgFRC,6MA7EbtB,MAAQ,CAENuB,SAAU,CACRT,KAAM,IAGRU,MAAO,MAITC,WAAa,SAACC,GAEZ,IAAMC,EAAMD,EAAME,OAAOC,YAEnBC,EAAUJ,EAAME,OAAOG,MAEvBC,EAAgB5B,EAAKJ,MAAMuB,SAE3BU,EAAOC,OAAOC,OAAO,GAAIH,GAE/BC,EAAKN,GAAOG,EAEZ1B,EAAKC,SAAS,CACZkB,SAAUU,OAKdG,WAAa,SAACV,GAEZA,EAAMW,iBAEN,IAAMJ,EAAO7B,EAAKJ,MAAMwB,MAAMc,MAAM,GAEpCL,EAAKM,KAAKnC,EAAKJ,MAAMuB,UAErBnB,EAAKC,SAAS,CACZmB,MAAOS,EACPV,SAAU,CACRT,KAAM,SAWZE,WAAa,SAACC,GACZuB,QAAQC,IAAIrC,EAAKJ,MAAMwB,MAAQP,GAC/B,IAAMgB,EAAO7B,EAAKJ,MAAMwB,MAAMc,MAAM,GACpCL,EAAKS,OAAOzB,EAAO,GACnBb,EAAKC,SAAS,CAAEmB,MAAOS,iFARvB1B,KAAKF,SAAS,CAAEmB,MAAO,sCAWhB,IAAAlB,EAAAC,KAEDoC,EAAWpC,KAAKP,MAAMwB,MAAMoB,IAAI,SAAC/B,EAAMI,GAC3C,OAAOT,EAAAC,EAAAC,cAACmC,EAAD,CAAUhC,KAAMA,EAAMI,MAAOA,EAAOD,WAAYV,EAAKU,eAE9D,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,QAAMoC,SAAUvC,KAAK6B,YACnB5B,EAAAC,EAAAC,cAAA,SAAOmB,YAAY,OAAOT,SAAUb,KAAKkB,WAAYM,MAAOxB,KAAKP,MAAMuB,SAAST,KAAMiC,MAAM,QAC5FvC,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAAS6B,MAAM,WAA5B,eAEDJ,EACDnC,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASH,QAASR,KAAKyC,WAAWC,KAAK1C,MAAOI,UAAU,WAArE,SACAH,EAAAC,EAAAC,cAAA,aAAQ,+CAzEEW,aCQE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.489f45e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass ListItem extends Component {\n\n    // Declaring the state of the checkbox and crossline.\n    state = {\n        check: false,\n        cross: 'false',\n    }\n\n    // Setting a function to crossline checked tasks.\n    onCheck = () => {\n        if (this.state.cross === 'false') {\n            this.setState({ cross: 'crossed', check: true })\n        } else {\n            this.setState({ cross: 'false', check: false })\n        }\n    }\n\n    // Copying to a new array to remove a checked task item.\n    // removeItem() {\n    //     this.props.removeItem(this.props.index)\n    //     console.log(this.state.tasks);\n    //     const newList = this.state.tasks.splice(0);\n    //     this.setState({tasks:newList})\n    // }\n      \n\n    render() {\n        return (\n            <div>\n                <h1 className={this.state.cross}>{this.props.task.Task} <span onClick={() => this.props.removeItem(this.props.index)}>‚äù</span> </h1>\n                <div className=\"item-checkbox\">\n                    <input type=\"checkbox\" checked={this.state.check}\n                        onChange={() => this.onCheck()} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ListItem;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\n\nclass App extends Component {\n\n  state = {\n    // Form setup, input empty text for adding new items.\n    formData: {\n      Task: ''\n    },\n    // List of tasks on submition for To Do List.\n    tasks: []\n  }\n\n  // Function for adding new tasks in the input.\n  updateItem = (event) => {\n    // Assigning a key input for the input bar.\n    const key = event.target.placeholder\n    // Getting the typed item from the user input.\n    const newData = event.target.value\n    // Assigning an original state location.\n    const originalState = this.state.formData\n    // Make a copy of the originalState\n    const copy = Object.assign({}, originalState)\n    // Updating the new copy with the new data user input.\n    copy[key] = newData\n    // Set the state with the new copy.\n    this.setState({\n      formData: copy\n    })\n  }\n\n  // Function for submitting the new task into the task list.\n  submitItem = (event) => {\n    // Prevent the page from refreshing.\n    event.preventDefault()\n    // Copy tasks list to a new array.\n    const copy = this.state.tasks.slice(0)\n    // Adding tasks list to new array.\n    copy.push(this.state.formData)\n    // Set the state with new copy\n    this.setState({\n      tasks: copy,\n      formData: {\n        Task: ''\n      }\n    })\n  }\n\n  // Function for clear tasks button.\n  clearTasks() {\n    this.setState({ tasks: [] });\n  }\n\n  // Copying to a new array to remove a checked task item.\n  removeItem = (index) => {\n    console.log(this.state.tasks , index);\n    const copy = this.state.tasks.slice(0)\n    copy.splice(index, 1);\n    this.setState({ tasks: copy })\n}\n\n  render() {\n    // Declare the item list showen in the screen after submiting a task.\n    const ItemList = this.state.tasks.map((task, index) => {\n      return <ListItem task={task} index={index} removeItem={this.removeItem} />;\n    })\n    return (\n      <div>\n        <header>To Do List</header>\n        <form onSubmit={this.submitItem}>\n          <input placeholder=\"Task\" onChange={this.updateItem} value={this.state.formData.Task} class='bar'/>\n          <button type=\"submit\" class='button1'> Add Task </button>\n        </form>\n        {ItemList} \n        <button type=\"button\" onClick={this.clearTasks.bind(this)} className='button1'>Clear</button>\n        <style>{'body { background-color: #0a85aa; }'}</style>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}